# -*- coding: utf-8 -*-
"""irrFind

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10d-zNOxCCo9rA9qaD7Rx3J6NyL1k63Pt
"""

def irrFind(cash_flows, cashFlowPeriod, compoundPeriod, tolerance=1e-6, max_iterations=1000):
    """在 -10% 到 10% 的範圍內嘗試不同初始猜測值以計算 IRR"""

    # 嘗試的初始猜測值範圍
    guess_values = [i / 100 for i in range(-10, 11)]  # -10% 到 10%

    # 嘗試多個初始猜測值
    for guess in guess_values:
        rate = guess
        for _ in range(max_iterations):
            # 計算 NPV
            npv_value = sum([cf / (1 + rate) ** i for i, cf in enumerate(cash_flows)])
            derivative = sum([-i * cf / (1 + rate) ** (i + 1) for i, cf in enumerate(cash_flows)])

            if abs(derivative) < tolerance:  # 防止除以零
                break

            # 使用牛頓-拉夫森法更新 rate
            rate -= npv_value / derivative

            # 如果 NPV 足夠接近 0，返回計算出的 IRR
            if abs(npv_value) < tolerance:
                return rate

    # 如果無法在範圍內找到 IRR，返回 None
    return None